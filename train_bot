from aiogram.dispatcher.filters import Text
import requests
import datetime
from datetime import date
from aiogram import Bot, Dispatcher, executor, types
import json
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

token = '5349770843:AAHBhB-_mJYPr6w4DIGpl0mdMJU4A841duw'
yandex_api = "5d00a2a3-fdd0-4fcd-9da7-0c17e5f470e5"
bot = Bot(token)
dp = Dispatcher(bot)

novodachka = "s9601261"
timka = "s9602463"
circle = "s9601830"
dolgopa = "s9600766"
savela = "s2000009"
bel = "s2000006"


def make_json(api_y: str, station_from, station_to):
    now = date.today()
    url = f'https://api.rasp.yandex.net/v3.0/search/?from={station_from}&to={station_to}&format=json&apikey={api_y}' \
          f'&lang=ru_RU&page=2&date={now}&system=yandex&limit=200'
    yandex_req = requests.get(url)
    yandex_json = json.loads(yandex_req.text)
    return yandex_json


def find_train(data: json):
    now = datetime.datetime.now()
    now = now.isoformat()
    i = 0
    information = data["segments"][0]['departure']
    while information <= str(now):
        i += 1
        information = data["segments"][i]['departure']

    return information[11:16]


@dp.message_handler(commands=['start'])
async def start_menu(message: types.Message):
    start_message1 = "Привет, это бот, который поможет тебе успевать на электрички! \n"
    start_message2 = "Чтобы узнать подробнее, воспользуйся командой /help"
    start_message = start_message1 + start_message2
    await message.reply(start_message)


@dp.message_handler(commands=['help'])
async def start_menu(message: types.Message):
    start_message = "Если хочешь узнать информацию про следующую электричку, воспользуйся командой /next"
    await message.reply(start_message)


@dp.message_handler(commands=['next'])
async def choose_station(message: types.Message):
    mes = "Выбери станцию, с которой отправляешься"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons1 = ["Долгопрудная", "Новодачная"]
    keyboard.add(*buttons1)
    buttons2 = ["Тимирязевская", "Окружная"]
    keyboard.add(*buttons2)
    buttons3 = ["Савеловская", "Белорусская"]
    keyboard.add(*buttons3)
    await message.answer(mes, reply_markup=keyboard)


@dp.message_handler(Text(equals="Белорусская"))
async def start_bel(message: types.Message):
    mess = "Оставь надежду, всяк сюда входящий! \n"
    now_json = make_json(yandex_api, bel, dolgopa)
    mess = mess + str(find_train(now_json))

    await message.reply(mess)


@dp.message_handler(Text(equals="Новодачная"))
async def start_novodachka(message: types.Message):
    now_json = make_json(yandex_api, novodachka, savela)
    mess = "Следующая электричка прибудет: \n"
    mess = mess + str(find_train(now_json))
    await message.answer(mess)


@dp.message_handler(Text(equals="Долгопрудная"))
async def start_dolgopa(message: types.Message):
    now_json = make_json(yandex_api, dolgopa, savela)
    mess = "Следующая электричка прибудет: \n"
    mess = mess + str(find_train(now_json))
    await message.answer(mess)


@dp.message_handler(Text(equals="Окружная"))
async def start_circle(message: types.Message):
    now_json = make_json(yandex_api, circle, dolgopa)
    mess = "Следующая электричка прибудет: \n"
    mess = mess + str(find_train(now_json))
    await message.answer(mess)


@dp.message_handler(Text(equals="Тимирязевская"))
async def start_timka(message: types.Message):
    now_json = make_json(yandex_api, timka, dolgopa)
    mess = "Следующая электричка прибудет: \n"
    mess = mess + str(find_train(now_json))
    await message.answer(mess)


@dp.message_handler(Text(equals="Савеловская"))
async def start_savela(message: types.Message):
    now_json = make_json(yandex_api, savela, dolgopa)
    mess = "Следующая электричка прибудет: \n"
    mess = mess + str(find_train(now_json))
    await message.answer(mess)


if __name__ == '__main__':
    executor.start_polling(dp)
